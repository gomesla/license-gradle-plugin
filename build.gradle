defaultTasks 'build'

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'license'
apply plugin: 'com.jfrog.bintray'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
    }
}

group = 'nl.javadude.gradle.plugins'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories { jcenter() }

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
	project {
		natures = [
			'org.eclipse.jdt.groovy.core.groovyNature', 
			'org.springsource.ide.eclipse.gradle.core.nature', 
			'org.eclipse.jdt.core.javanature', 
			'org.eclipse.wst.common.project.facet.core.nature'
		]
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder' 
		buildCommand 'org.eclipse.jdt.core.javabuilder'
	}
	classpath {
		
	}
}

configurations.compile.transitive = false

dependencies {
    compile "org.codehaus.plexus:plexus-utils:2.0.5"
    compile "com.mycila.xmltool:xmltool:3.3"
    // Using compile instead of groovy, so that it goes into the pom
    compile ('com.mycila.maven-license-plugin:maven-license-plugin:1.10.b1') {
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
    }
    compile gradleApi()

    testCompile 'junit:junit:4.11'
    testCompile 'com.google.guava:guava:17.0'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    ignoreFailures true
}

def pomConfig = {
    name project.name
    description project.project_description
    url project.project_url
    inceptionYear '2011'

    scm { url project.project_scm }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'hierynomus'
            name 'Jeroen van Erp'
            url 'http://www.javadude.nl/'
            email 'jeroen@javadude.nl'
            roles { role 'Developer' }
        }
    }

    contributors {
        contributor {
            name 'Tim Harsch'
            email 'harschware@yahoo.com'
        }
        contributor {
            name 'Justin Ryan'
            email 'jryan@netflix.com'
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + pomConfig
            }
        }
    }
}

// Both 'bintrayUsername' and 'bintrayApiKey' must defined in the ~/.gradle/gradle.properties
if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = 'invalid'
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = 'invalid'

bintray {
    user = project.bintrayUsername
    key = project.bintrayApiKey
    publications = ['mavenCustom']
    pkg {
        repo = project.project_bintray_repo
        name = project.name
        desc = project.project_description
        licenses = ['Apache-2.0']
        labels = ['gradle', 'plugin', 'license']
        websiteUrl = project.project_url
        issueTrackerUrl = project.project_issues_url
        vcsUrl = project.project_scm
        publicDownloadNumbers = true
        version {
            vcsTag = project.version
            attributes = [
                    'gradle-plugin': ['com.github.hierynomus.license', project.group, project.name].join(':')
            ]
        }
    }
}

if (!System.env.containsKey("JENKINS_URL")) {
    def javaVersion = System.properties['java.version']
    if (JavaVersion.toVersion(javaVersion) != project.targetCompatibility) {
//        throw new GradleException("Expected Java version ${project.targetCompatibility} but running with $javaVersion")
    }
}
